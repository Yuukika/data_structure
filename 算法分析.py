"""
一个算法的运行所消耗的时间和很多因素有关，计算机的运行速度，编写程序所采用的计算机语言，编译产生的机器语言代码质量和问题的规模
仅考虑算法本身的高低，可以认为一个特定算法的”运行工作量“的大小只依赖于问题的规模n

算法由控制结构和原操作构成，前者分为顺序，分支，循环三种，后者是指固有的数据类型的操作，算法的运行时间由这两的综合效果决定。


为了便于比较同一问题的不同算法，通常从算法中选取一种对于所研究的问题来说是基本运算的原操作（基本运算
算法的执行时间大致为基本运算所需的时间与其运算次数（一个语句的运算次数称为语句频度）的乘积。
被视为算法基本运算的一般是最深层循环内的语句
一个算法中，执行基本运算的次数越少，运行时间越短，反之亦然。
通常把算法中执行基本运算的次数称为算法的时间复杂度，一个算法的时间复杂度是指其基本运算子啊算法中重复执行的次数。

算法中基本运算次数T(n)是问题规模n的某个函数f(n)：
T(n) = O(f(n))
表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同.
若f(n)是正整数N的一个函数，则T(n)=O(f(n))表示存在一个正的常数M,使得当n>=n0时满足|T(n)|<=M|f(n)|,也就是
只求出T(n)的最高阶，忽略其低阶项和常数项。
1、一个没有循环的算法的基本运算次数与问题规模n无关，记作O(1),也成常数阶。
2、一个只有一重循环的算法的基本运算次数与问题规模n的增长呈线性增大关系，记作O(n),也称线性阶。
3、平方阶O(n^2),立方阶O(n^3),对数阶O(log2n),指数阶O(2^n)
各种不同数量级对应值存在的关系如下：
O(1)<O(log2n)<O(n)<O(n*log2n)<O(n^2)<O(n^3)<O(2^n)<O(n!)
"""